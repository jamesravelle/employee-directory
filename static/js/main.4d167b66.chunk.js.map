{"version":3,"sources":["components/Header.js","components/Search.js","components/Employees.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Search","value","name","onChange","type","placeholder","onClick","reset","Employees","Object","keys","employees","map","keyName","keyIndex","key","x","sort","input","charAt","toUpperCase","substring","arrowDisplay","employee","index","src","photo","alt","firstName","lastName","phone","href","email","DOB","App","state","search","result","handleInputChange","event","target","setState","handleSearch","preventDefault","resultArray","console","log","i","length","push","includes","handleSort","a","b","resetSearch","axios","get","then","response","data","results","newArray","newObject","picture","large","first","last","dob","age","catch","err","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4d167b66.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props){\n    return (\n        <header className=\"header\">\n            <h1>{props.text}</h1>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Search(props){\n    return (\n        <div className=\"search-bar\">\n        <p><strong>Search by name:</strong></p>\n        <form className=\"form\">\n        <input\n            value={props.value}\n            name=\"search\"\n            onChange={props.onChange}\n            type=\"text\"\n            placeholder=\"Search\"\n        />\n         &nbsp;\n         <button onClick={props.onClick}>Submit</button>\n         &nbsp;\n         <button onClick={props.reset}>Reset</button>\n        </form>\n        </div>\n    );\n}\n\nexport default Search;","import React from \"react\";\n\nfunction Employees(props){\n    // This function changes the table header text\n    const changeHeaders = input => {\n        if(input === \"lastName\"){\n            return \"Last Name\"\n        } \n        if(input === \"firstName\"){\n            return \"First Name\"\n        } \n        if(input === \"DOB\"){\n            return \"Age\"\n        } \n        return input.charAt(0).toUpperCase() + input.substring(1);\n    }\n\n    // This function toggles the arrow\n    const arrowDisplay = x => {\n        if(x === \"photo\"){\n            return \"\";\n        }\n        if(x === props.sort){\n            return \"⮝\";\n        } else {\n            return \"⮟\";\n        }\n    }\n\n    // This function toggles the background color\n    const bgColorToggle = x => {\n        if(x === \"photo\"){\n            return \"blue-bg\";\n        }\n        if(x === props.sort){\n            return \"red-bg\"\n        } else {\n            return \"blue-bg\"\n        }\n    }\n\n    // display data, sort in app.js\n    return (\n        <div>\n            <p><strong>Click headers to sort:</strong></p>\n            {/* Output the table headers as buttons */}\n            <div>\n            <div className=\"row tableHeader no-gutters\">\n                {\n                Object.keys(props.employees[0]).map(function(keyName, keyIndex) {\n                        return (\n                            <div className=\"col-md-2\">\n                            <button key={keyIndex} value={keyName} onClick={props.onClick} className={bgColorToggle(keyName)}>\n                                {\n                                changeHeaders(keyName) + \"  \" + arrowDisplay(keyName)\n                                }\n                            </button> \n                            </div>\n                        )\n                    })\n                }\n            </div>\n            </div>\n            <div className=\"employeeContainer\">\n                {/* Output employees array from state */}\n               {\n               props.employees.map((employee, index) => \n               <div className=\"row employee-row no-gutters\">\n                            <div className=\"col-md-2\" key={index}>\n                                <img src={employee.photo} alt=\"\" className=\"profilePicture\"/>\n                            </div>\n                            <div className=\"col-md-2\" key={index}>\n                               <div> {employee.firstName} </div>\n                            </div>\n                            <div className=\"col-md-2\" key={index}>\n                                {employee.lastName}\n                            </div>\n                            <div className=\"col-md-2\" key={index}>\n                                {employee.phone}\n                            </div>\n                            <div className=\"col-md-2\" key={index}>\n                                {}\n                                <a href={\"mailto:\" + employee.email}>{employee.email}</a>\n                            </div>\n                            <div className=\"col-md-2\" key={index}>\n                                {employee.DOB}\n                            </div>\n                </div>   \n                )\n               }\n            </div>\n        </div>\n    );\n}\n\nexport default Employees;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Search from \"./components/Search\"\nimport Employees from \"./components/Employees\"\nimport axios from \"axios\";\n// import randomUsers from \"./utils/randomUsers\"\n\nclass App extends React.Component {\n  state = {\n    search: \"\",\n    result: [],\n    // Populate employees object so that it can be replaced and as a backup if the randomUsers API doesn't work\n    employees: [\n      {\n        photo: \"http://placekitten.com/200/200\", firstName: \"James\", lastName: \"Ravelle\", phone: \"610-442-1195\", email: \"james.ravelle@gmail.com\", DOB: \"5-23-1988\"\n      },\n      {\n        photo: \"http://placekitten.com/200/200\", firstName: \"Gary\", lastName: \"Smith\", phone: \"610-555-5555\", email: \"gary@gmail.com\", DOB: \"3-6-1991\"\n      },\n      {\n        photo: \"http://placekitten.com/200/200\", firstName: \"John\", lastName: \"Johnson\", phone: \"610-123-5555\", email: \"john@gmail.com\", DOB: \"4-4-1945\"\n      },\n      {\n        photo: \"http://placekitten.com/200/200\", firstName: \"Luna\", lastName: \"Lovegood\", phone: \"610-866-5164\", email: \"luna@gmail.com\", DOB: \"12-3-1992\"\n      }\n    ],\n    sort: \"Hello\"\n  }\n\n  componentDidMount() {\n    // Get data for 10 users\n    axios\n      .get(\"https://randomuser.me/api/?results=10\")\n      .then(response => {\n        console.log(response.data.results);\n        // Build new employees object with random users \n        let newArray = []\n        for(let i = 0; i < response.data.results.length; i++){\n          let newObject = {\n            photo: response.data.results[i].picture.large,  \n            firstName: response.data.results[i].name.first,\n            lastName: response.data.results[i].name.last,\n            phone: response.data.results[i].phone,\n            email: response.data.results[i].email,\n            DOB: response.data.results[i].dob.age\n          }\n          newArray.push(newObject);\n        }\n        this.setState({ employees: newArray });\n      })\n      .catch(err => {\n        // GET failed, log the error\n        console.log(err);\n      });\n    \n  }\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const {value, name} = event.target;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n\n  };\n\n  handleSearch = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n    let resultArray = [];\n    console.log(this.state.search);\n    // If the search is empty, show all results\n    if(this.state.search === \"\"){\n      for(let i = 0; i < this.state.employees.length; i++){\n          // this.state.result.push(this.state.employees[i])\n          resultArray.push(this.state.employees[i]);\n      }\n      this.setState({\n        result: resultArray\n      });\n    } else {\n      for(let i = 0; i < this.state.employees.length; i++){\n        let newString = this.state.employees[i].firstName + this.state.employees[i].lastName\n        if(newString.includes(this.state.search)){\n          // this.state.result.push(this.state.employees[i])\n          if (resultArray.length <= 0){\n            resultArray = [this.state.employees[i]];\n          } else {\n            resultArray.push(this.state.employees[i])\n          }\n          this.setState({\n            result: resultArray\n          });\n        }\n      }\n    }\n  };\n\n  handleSort = event => {\n    event.preventDefault();\n    this.setState({ sort: event.target.value})\n    const compareLastNames = ( a, b ) => {\n      if ( a.lastName < b.lastName ){ return -1; }\n      if ( a.lastName > b.lastName ){ return 1; }\n      return 0;\n    }\n    const compareFirstNames = ( a, b ) => {\n      if ( a.firstName < b.firstName ){ return -1; }\n      if ( a.firstName > b.firstName ){ return 1; }\n      return 0;\n    }\n    const comparePhone = ( a, b ) => {\n      if ( a.phone < b.phone ){ return -1; }\n      if ( a.phone > b.phone ){ return 1; }\n      return 0;\n    }\n    const compareEmail = ( a, b ) => {\n      if ( a.email < b.email ){ return -1; }\n      if ( a.email > b.email ){ return 1; }\n      return 0;\n    }\n    const compareAge = ( a, b ) => {\n      if ( a.DOB < b.DOB ){ return -1; }\n      if ( a.DOB > b.DOB ){ return 1; }\n      return 0;\n    }\n    switch(event.target.value) {\n      case \"lastName\":\n        this.setState({ employees: this.state.employees.sort(compareLastNames)})\n        break;\n      case \"firstName\":\n        this.setState({ employees: this.state.employees.sort(compareFirstNames)})\n        break;\n      case \"phone\":\n        this.setState({ employees: this.state.employees.sort(comparePhone)})\n        break;\n      case \"email\":\n        this.setState({ employees: this.state.employees.sort(compareEmail)})\n        break;\n      case \"DOB\":\n        this.setState({ employees: this.state.employees.sort(compareAge)})\n        break;\n      default:\n        break;\n    }\n  }\n\n  resetSearch = event => {\n    event.preventDefault();\n    let resultArray = [];\n    for(let i = 0; i < this.state.employees.length; i++){\n      // this.state.result.push(this.state.employees[i])\n      resultArray.push(this.state.employees[i]);\n    }\n    this.setState({\n      search: \"\",\n      result: [],\n      employees: resultArray\n    });\n  }\n\n  render() {\n    const headline = \"Employee Directory\"\n    return (\n      <div className=\"App\">\n        <Header text={headline}/>\n        <Search \n            value={this.state.search}\n            onChange={this.handleInputChange}\n            onClick={this.handleSearch}\n            reset={this.resetSearch}\n        />\n        <div className=\"container\">\n        <Employees \n          employees = {this.state.result.length <= 0 ? this.state.employees : this.state.result}\n          onClick={this.handleSort}\n          sort={this.state.sort}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}